@page 

@{
    var roomName = HttpContext.Request.Query["room"];
}

<!DOCTYPE html>
<html>
<head>
    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
        }
        /* Chat Container */
        #messagesList {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }
        /* Chat Bubble */
        .chat-bubble {
            border-radius: 12px;
            padding: 10px;
            margin: 5px;
            display: inline-block;
        }
        /* Differentiate between user and others */
        .chat-bubble.user {
            background-color: #007bff;
            color: white;
            float: right;
            clear: both;
        }
        .chat-bubble.others {
            background-color: #f1f1f1;
            float: left;
            clear: both;
        }

         .chat-bubble.system-message {
            background-color: #4447f0;
            float: left;
            clear: both;
        }
    </style>
</head>

<body>

<h1>@roomName</h1>

<!-- Incoming chat messages. -->
<div id="messagesList"></div>

<!-- Input field for the user name. -->
<input type="text" id="userInput" placeholder="Name" />

<!-- Input field for the chat message content. -->
<input type="text" id="messageInput" placeholder="Message" />

<!-- Button to trigger the sending of a chat message. -->
<button id="sendButton">Send</button>

<!-- File input for multimedia content -->
<br><input type="file" id="fileInput" />
<button id="uploadButton">Upload</button>


@section Scripts {
    <!-- Include the SignalR JavaScript library to enable real-time functionalities. -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.9/signalr.min.js"></script>

    <!-- Handle chat functionalities. -->
    <script type="text/javascript">
        // Set up a connection to the SignalR hub on the server.
        const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").withAutomaticReconnect().build();

        let currentUser = 'anon';  // Initialize as empty string
        let roomName = '@roomName';

        // Update currentUser whenever userInput changes
        document.getElementById("userInput").addEventListener("input", () => {
            currentUser = document.getElementById("userInput").value;
        });

        // Event listener for receiving messages from the server.
        connection.on("ReceiveMessage", (connectionId, user, message) => {
            const msg = document.createElement("div");
            if (user === "Server") {
                msg.className = "system-message";
            } else {
                msg.className = `chat-bubble ${connection.connectionId === connectionId ? 'user' : 'others'}`;
            }
            msg.textContent = `${user}: ${message}`;
            document.getElementById("messagesList").appendChild(msg);
        });

        // Start the SignalR connection.
        connection.start().then(() => {
            // If successful, join the specified chat room (based on the Razor variable).
            connection.invoke("JoinRoom", roomName, currentUser);
        }).catch(err => console.error(err));  // Log errors if any.

        // Function to send message
        const sendMessage = () => {
            // Fetch values from the input fields.
            currentUser = document.getElementById("userInput").value;  // Update the current user
            const message = document.getElementById("messageInput").value;
            
            // Clear message input field
            document.getElementById("messageInput").value = '';
            
            // Send the message to the specified chat room.
            connection.invoke("SendMessageToRoom", roomName, currentUser, message).catch(err => console.error(err));
        };

        // Function to send multimedia message
        const sendMultimedia = (file) => {
            const reader = new FileReader();
            reader.onload = function(event) {
                const base64String = event.target.result.split(',')[1];
                connection.invoke("SendMultimediaToRoom", roomName, currentUser, base64String, file.type).catch(err => console.error(err));
            };
            reader.readAsDataURL(file);
        };

        // Function to generate a unique identifier for each file upload
        function generateUniqueFileId() {
            return Date.now().toString() + Math.random().toString(36).substr(2, 9);
        }

        // Function to upload file in chunks
        async function uploadFileInChunks() {
            @* console.log("uploadFileInChunks is being called");
            const testArray = new Uint8Array([1, 2, 3, 4, 5]);
            await connection.invoke('UploadFileChunk', roomName, currentUser, testArray, "testType", "testId"); *@

            const fileInput = document.getElementById("fileInput");
            const file = fileInput.files[0];
            if (!file) {
                return;
            }

            const fileId = generateUniqueFileId();  // Generate a unique ID for this file upload
            const chunkSize = 50 * 50; // Bytes
            let offset = 0;

            while (offset < file.size) {
                const chunk = file.slice(offset, offset + chunkSize);
                console.log("About to read a chunk...");
                const arrayBuffer = await new Promise((resolve, reject) => {
                    const reader = new FileReader();
                    reader.onload = event => resolve(event.target.result);
                    reader.onerror = reject;
                    reader.readAsArrayBuffer(chunk);
                });
                console.log("Finished reading a chunk.");

                const byteArray = new Uint8Array(arrayBuffer);

                // Send this chunk to the server.
                console.log("invoking UploadFileChunk");
                await connection.invoke('UploadFileChunk', roomName, currentUser, byteArray, file.type, fileId)
                console.log("Finished invoking UploadFileChunk");

                offset += chunkSize;
            }

            // Notify the server that the file upload is complete
            await connection.invoke('FinalizeFileUpload', roomName, currentUser, file.type, fileId).catch(err => console.error("Error in FinalizeFileUpload: ", err));;
        }

        // Event listener for receiving file chunks from the server.
        connection.on("ReceiveFileChunk", (user, chunkLength, fileType) => {
            console.log(`Received a file chunk from ${user} with length ${chunkLength} and type ${fileType}`);
            // Need to add more logic here to handle the received chunk.
        });



        // Event listener for receiving multimedia messages from the server.
        connection.on("ReceiveMultimedia", (user, base64String, fileType) => {
            const msg = document.createElement("div");
            msg.className = `chat-bubble ${user === currentUser ? 'user' : 'others'}`;

            if (fileType.startsWith("image/")) {
                msg.innerHTML = `${user}: <img src="data:${fileType};base64,${base64String}" width="200" />`;
            } else if (fileType.startsWith("video/")) {
                msg.innerHTML = `${user}: <video controls width="200"><source src="data:${fileType};base64,${base64String}" type="${fileType}"></video>`;
            } // Add more types as needed

            document.getElementById("messagesList").appendChild(msg);
        });

        // Attach click event to the upload button to upload file in chunks
        document.getElementById("uploadButton").addEventListener("click", uploadFileInChunks);

        // Attach click event to the send button
        document.getElementById("sendButton").addEventListener("click", sendMessage);

        // Attach keydown event to the message input
        document.getElementById("messageInput").addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });

        // This event is raised when the connection is lost.
        connection.onclose(async () => {
            console.log("Connection lost. Reconnecting...");
            // Need to add custom logic here, such as updating the UI to inform the user.
        });

        // This event is raised when the client begins reconnecting.
        connection.onreconnecting(error => {
            console.log(`Connection lost due to error "${error}". Reconnecting.`);
            // Add custom logic here.
        });

        // This event is raised when the client successfully reconnects.
        connection.onreconnected(connectionId => {
            console.log(`Connection reestablished. Connected with connectionId "${connectionId}".`);
            // More custom logic can go here.
        });

    </script>
}
</body>
</html>

