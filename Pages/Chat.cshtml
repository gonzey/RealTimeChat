@page 

@{
    var roomName = HttpContext.Request.Query["room"];
}

<!DOCTYPE html>
<html>
<head>
    <style>
        /* General Styles */
        body {
            font-family: Arial, sans-serif;
        }
        /* Chat Container */
        #messagesList {
            max-height: 400px;
            overflow-y: auto;
            border: 1px solid #ccc;
            padding: 10px;
            margin-bottom: 10px;
        }
        /* Chat Bubble */
        .chat-bubble {
            border-radius: 12px;
            padding: 10px;
            margin: 5px;
            display: inline-block;
        }
        /* Differentiate between user and others */
        .chat-bubble.user {
            background-color: #007bff;
            color: white;
            float: right;
            clear: both;
        }
        .chat-bubble.others {
            background-color: #f1f1f1;
            float: left;
            clear: both;
        }

         .chat-bubble.system-message {
            background-color: #4447f0;
            float: left;
            clear: both;
        }
    </style>
</head>

<body>

<h1>@roomName</h1>

<!-- Incoming chat messages. -->
<div id="messagesList"></div>

<!-- Input field for the user name. -->
<input type="text" id="userInput" placeholder="Name" />

<!-- Input field for the chat message content. -->
<input type="text" id="messageInput" placeholder="Message" />

<!-- Button to trigger the sending of a chat message. -->
<button id="sendButton">Send</button>

<!-- File input for multimedia content -->
<br><input type="file" id="fileInput" />
<button id="uploadButton">Upload</button>

@section Scripts {
    <!-- Include the SignalR JavaScript library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/3.1.9/signalr.min.js"></script>
    <!-- Include the WebTorrent JavaScript library -->
    <script src="https://cdn.jsdelivr.net/npm/webtorrent@latest/webtorrent.min.js"></script>

    <script type="text/javascript">
        // Initialize SignalR connection
        const connection = new signalR.HubConnectionBuilder().withUrl("/chatHub").build();

        // Initialize WebTorrent client
        const client = new WebTorrent();

        // Log if WebTorrent client is destroyed
        console.log("Is WebTorrent client destroyed?", client.destroyed);

        // Log peer addresses (for debugging network issues)
        client.on('torrent', function (torrent) {
            torrent.on('wire', function (wire, addr) {
                console.log("Connected to peer with address", addr);
            });

            // Log when torrent is ready
            torrent.on('ready', function () {
                console.log('Torrent is ready:', torrent.infoHash);
            });
        });

        // Listen to global errors
        client.on('error', function (err) {
            console.error('Global error from WebTorrent client:', err);
        });

        // Log current torrents (for debugging)
        console.log("Current torrents:", client.torrents.map(t => t.infoHash));

        let currentUser = 'anon';
        let roomName = '@roomName';

        // Update currentUser whenever userInput changes
        document.getElementById("userInput").addEventListener("input", () => {
            currentUser = document.getElementById("userInput").value;
        });

        const seedFile = (file) => {
            client.seed(file, (torrent) => {
                console.log("Seeding file:", file.name);

                // Call the SignalR method to send torrent details to all clients in the room
                connection.invoke("SendTorrentDetailsToRoom", roomName, currentUser, file.name, file.size, torrent.infoHash).catch(err => console.error(err));
            });
        };

        const addFileBubbleToChat = (infoHash, user) => {
            // Create a chat bubble div
            const msg = document.createElement("div");
            msg.className = 'chat-bubble user';  // or 'others' based on who is sending

            // Create a text element for the timestamp and message
            const textElement = document.createElement("p");
            const timestamp = new Date().toLocaleTimeString();
            textElement.textContent = `${timestamp} - ${user}`;
            msg.appendChild(textElement);

            // Create a download button
            const downloadButton = document.createElement("button");
            downloadButton.innerText = "Download";

            // Add the infoHash as a custom attribute
            downloadButton.setAttribute("data-infohash", infoHash);

            // Append the download button to the chat bubble
            msg.appendChild(downloadButton);

            // Append the chat bubble to the messages list
            document.getElementById("messagesList").appendChild(msg);
        };


        // Event delegation
        document.getElementById("messagesList").addEventListener("click", function(event) {
            if (event.target.innerText === "Download") {
                console.log("Download button clicked");
                
                // Get the infoHash from the custom attribute
                const infoHash = event.target.getAttribute("data-infohash");
                
                // Download torrent
                downloadFile(infoHash);
            }
        });

        const downloadFile = (infoHash) => {
            try {
                client.add(infoHash, (err, torrent) => {
                    console.log("downloadFile called with:", infoHash);
                    if (err) {
                        console.error("Error adding torrent:", err);
                        return;
                    }
                    
                    torrent.on('error', function (err) {
                        console.error('Error in torrent:', err);
                    });

                    torrent.on('download', (bytes) => {
                        console.log('just downloaded: ' + bytes);
                        console.log('total downloaded: ' + torrent.downloaded);
                        console.log('download speed: ' + torrent.downloadSpeed);
                        console.log('progress: ' + torrent.progress);
                    });

                    torrent.on('done', () => {
                        console.log('torrent download finished');
                    });
                });
            } catch (err) {
                console.error("Error downloading file:", err);
            }
        };

        // Event listener for receiving torrent details from the server.
        connection.on("ReceiveTorrentDetails", (user, fileName, fileSize, infoHash) => {
            // Create a chat bubble div
            console.log("ReceiveTorrentDetails triggered");
            addFileBubbleToChat(infoHash, user)
        });

         // Attach click event to the upload button
        document.getElementById("uploadButton").addEventListener("click", () => {
            const file = document.getElementById("fileInput").files[0];
            if (file) {
                seedFile(file);
            }
        });

        // Event listener for receiving messages from the server.
        connection.on("ReceiveMessage", (connectionId, user, message) => {
            const msg = document.createElement("div");
            if (user === "Server") {
                msg.className = "system-message";
            } else {
                msg.className = `chat-bubble ${connection.connectionId === connectionId ? 'user' : 'others'}`;
            }
            msg.textContent = `${user}: ${message}`;
            document.getElementById("messagesList").appendChild(msg);
        });

        // Start the SignalR connection.
        connection.start().then(() => {
            // If successful, join the specified chat room (based on the Razor variable).
            connection.invoke("JoinRoom", roomName, currentUser);
        }).catch(err => console.error(err));  // Log errors if any.

        // Function to send message
        const sendMessage = () => {
            // Fetch values from the input fields.
            currentUser = document.getElementById("userInput").value;  // Update the current user
            const message = document.getElementById("messageInput").value;
            
            // Clear message input field
            document.getElementById("messageInput").value = '';
            
            // Send the message to the specified chat room.
            connection.invoke("SendMessageToRoom", roomName, currentUser, message).catch(err => console.error(err));
        };

        connection.on("JoinedRoom", (room) => {
            console.log(`Successfully joined room ${room}`);
            // Now safe to announce torrents, etc.
        });

        connection.on("UpdateUserList", (userList) => {
            // Update the UI with the new user list
            const userListDiv = document.getElementById("userList");
            userListDiv.innerHTML = userList.join(", ");
        });

        // Attach click event to the send button
        document.getElementById("sendButton").addEventListener("click", sendMessage);

        // Attach keydown event to the message input
        document.getElementById("messageInput").addEventListener("keydown", (event) => {
            if (event.key === "Enter") {
                event.preventDefault();
                sendMessage();
            }
        });
    </script>
}
</body>
</html>

